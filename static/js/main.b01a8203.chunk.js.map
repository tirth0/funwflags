{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Loader/Loader.js","Components/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","onClick","this","props","handleReset","Component","Loader","Quiz","state","correct","correctStyle","incorrectStyle","defaultStyle","handleClick","bind","onCorrect","onIncorrect","previousProps","previousState","options","Math","floor","random","setState","e","setTimeout","target","style","backgroundColor","persist","value","name","map","elem","ind","key","type","img","src","flag","alt","App","generateOptions","flags","fetch","then","data","json","countries","country","catch","err","console","error","view","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b01a8203.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Navbar.css'\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"navbar\">\r\n               <h1 className=\"navbar__name\">Guess The Flag?</h1>\r\n               <nav className=\"navbar__nav\">\r\n                   <li onClick={this.props.handleReset}>\r\n                       Reset\r\n                   </li>\r\n               </nav> \r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nNavbar.propTypes = {\r\n    handleReset : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './Loader.css';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loader\">\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Quiz.css';\r\nimport Loader from '../Loader/Loader';\r\n\r\nclass Quiz extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            correct : {},\r\n            correctStyle : 'green',\r\n            incorrectStyle : '#EB2848',\r\n            defaultStyle : '#2B76CC'\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.onCorrect = this.onCorrect.bind(this);\r\n        this.onIncorrect = this.onIncorrect.bind(this);\r\n    }\r\n    componentDidUpdate(previousProps, previousState){\r\n       let correct ={};\r\n       if (previousProps.options && previousProps !== this.props){\r\n           correct = this.props.options[Math.floor(Math.random()*4)];\r\n           this.setState({correct});\r\n       }\r\n\r\n    }\r\n    \r\n    onCorrect(e){\r\n        setTimeout(()=>{\r\n            e.target.style.backgroundColor = this.state.defaultStyle;\r\n            this.props.handleReset();\r\n        },1000);\r\n    }\r\n\r\n    onIncorrect(e){\r\n        setTimeout(()=>{\r\n            e.target.style.backgroundColor = this.state.defaultStyle;\r\n        },500);\r\n    }\r\n\r\n    handleClick(e){\r\n        e.persist();\r\n        \r\n        if (e.target.value === this.state.correct.name){\r\n            e.target.style.backgroundColor = this.state.correctStyle;\r\n            this.onCorrect(e);\r\n        }\r\n        else{\r\n            e.target.style.backgroundColor = this.state.incorrectStyle;\r\n            this.onIncorrect(e);\r\n        }\r\n\r\n    }\r\n        \r\n    \r\n    render() {\r\n        const style = {backgroundColor : '#2B76CC'};\r\n        const options = this.props.options.map((elem, ind) => (\r\n            <button \r\n            key={ind} \r\n            className=\"option\" \r\n            type=\"button\" \r\n            value={elem.name}\r\n            style = {style}\r\n            onClick ={(e) => this.handleClick(e)}\r\n            >\r\n                {elem.name}\r\n            </button> \r\n        ));\r\n        const img = this.state.correct? <img \r\n        src={this.state.correct.flag} \r\n        alt={this.state.correct.name}/> : <Loader />\r\n        return (\r\n            <div className=\"container-quiz-flag\">\r\n                <div className=\"container-quiz\">\r\n                    <h3>Which Country Does This Flag Represent?</h3>\r\n                    {options}\r\n                </div>\r\n                <div className=\"container-flag\"> \r\n                    {img}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuiz.propTypes = {\r\n    options : PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    handleReset : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Quiz;","import React,{Component} from 'react';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport Loader from './Components/Loader/Loader';\r\nimport Quiz from './Components/Quiz/Quiz';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.generateOptions = this.generateOptions.bind(this);\r\n    this.state = {\r\n      flags : [],\r\n      options : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const allCountries = 'https://restcountries.eu/rest/v2/all';\r\n    //const countryName  ='';\r\n    //const getFlagsByFullName = `https://restcountries.eu/rest/v2/name/${countryName}fullText=true`;\r\n    fetch(allCountries).then((data) => {\r\n      return data.json();\r\n    }).then(countries => {\r\n      let flags = countries.map((country, ind) => {\r\n        return {name : country.name,flag : country.flag};\r\n      });\r\n      \r\n      this.setState({flags});\r\n      this.generateOptions();\r\n    }  \r\n    ).catch(\r\n      err => console.error(err)\r\n    );\r\n    \r\n  }\r\n\r\n  generateOptions(){\r\n    const correctOption = this.state.flags[Math.floor(Math.random()*250)];\r\n    const incorrectOption1 = this.state.flags[Math.floor(Math.random()*250)];\r\n    const incorrectOption2 = this.state.flags[Math.floor(Math.random()*250)]; \r\n    const incorrectOption3 = this.state.flags[Math.floor(Math.random()*250)]; \r\n    const options = [correctOption, incorrectOption1,incorrectOption2,incorrectOption3];\r\n    this.setState({options});\r\n  }\r\n\r\n  \r\n  handleReset(){\r\n    setTimeout(()=>{\r\n      this.generateOptions();\r\n    },300);\r\n  }\r\n  \r\n\r\n  handleClick(){}\r\n  render(){\r\n    let view = <Loader />\r\n    view = <Quiz \r\n           options = {this.state.options}\r\n           handleReset = {this.handleReset}\r\n          />\r\n    return(\r\n      <div className=\"container\">\r\n      <Navbar \r\n       handleReset = {this.handleReset}\r\n      />\r\n      {view}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}